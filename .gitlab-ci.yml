stages:
  - test
  - security
<<<<<<< HEAD
  - review
  - stage
=======
  - build
>>>>>>> master
  - deploy

variables:
  DOCKER_IMAGE: registry.gitlab.com/devops-team/task-manager:$CI_COMMIT_REF_SLUG
<<<<<<< HEAD
  REVIEW_APP_URL: "http://review-$CI_COMMIT_REF_NAME.gitlab.example.com"
  STAGE_APP_URL: "http://stage.gitlab.example.com"
  ZAP_API_KEY: "$ZAP_API_KEY"
=======
>>>>>>> master

# Análise de Segurança
bandit-scan:
  stage: security
  image: python:3.13
  script:
    - pip install bandit
    - bandit -r app.py models.py config.py tests/ -f json > bandit_report.json
    - cat bandit_report.json
  artifacts:
    paths:
      - bandit_report.json
    reports:
      sast: bandit_report.json

dependency-check:
  stage: security
  image: owasp/dependency-check
  script:
    - dependency-check --project "Task Manager" --scan . --format "JSON" --out dependency-check-report.json
    - cat dependency-check-report.json
  artifacts:
    paths:
      - dependency-check-report.json
    reports:
      dependency_scanning: dependency-check-report.json

test:
  stage: test
  image: python:3.13
  before_script:
    - pip install -r requirements.txt
  script:
    - python -m pytest tests/ --cov=app --cov-report=term-missing

<<<<<<< HEAD
# Fase de Review
review:
  stage: review
=======
build-docker:
  stage: build
>>>>>>> master
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t $DOCKER_IMAGE .
    - docker push $DOCKER_IMAGE
<<<<<<< HEAD
    - echo "Aplicação disponível em: $REVIEW_APP_URL"
  artifacts:
    paths:
      - dependency-check-report.html
      - 2025-04-06-ZAP-Report-.html
    reports:
      security: dependency-check-report.html
  only:
    - merge_requests

# Deploy em Estágio
stage-deploy:
  stage: stage
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t $DOCKER_IMAGE .
    - docker push $DOCKER_IMAGE
    - echo "Aplicação disponível em: $STAGE_APP_URL"
  environment:
    name: staging
    url: $STAGE_APP_URL
  only:
    - main

# Testes de Segurança Dinâmicos (DAST)
zap-scan:
  stage: stage
  image: owasp/zap2docker-weekly
  script:
    - zap-cli --zap-url http://localhost:8080 spider $STAGE_APP_URL
    - zap-cli --zap-url http://localhost:8080 active-scan $STAGE_APP_URL
    - zap-cli --zap-url http://localhost:8080 report -o zap-report.html -f html
    - zap-cli --zap-url http://localhost:8080 report -o zap-report.json -f json
  artifacts:
    paths:
      - zap-report.html
      - zap-report.json
    reports:
      dast: zap-report.json
  dependencies:
    - stage-deploy
  only:
    - main

# Deploy para Produção
=======
  only:
    - master

>>>>>>> master
deploy-prod:
  stage: deploy
  image: alpine
  script:
    - echo "Deploy para produção"
    - echo "Implemente aqui seus comandos de deploy"
  when: manual
  only:
<<<<<<< HEAD
    - main
=======
    - master
>>>>>>> master
