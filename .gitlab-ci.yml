stages:
  - security
  - stage
  - deploy

variables:
  CI: true
  CI_SERVER: "gitlab"
  DOCKER_IMAGE: registry.gitlab.com/devops-team/task-manager:$CI_COMMIT_REF_SLUG
  STAGE_APP_URL: "https://stage.gitlab.example.com"
  PROD_APP_URL: "https://prod.gitlab.example.com"
  ZAP_API_KEY: "$ZAP_API_KEY"

workflow:
  rules:
    - if: $CI_SERVER == "gitlab"
      when: always
    - when: never

# Análise de Segurança
security-checks:
  stage: security
  image: python:3.9
  script:
    - pip install bandit
    - bandit -r . -f json -o bandit-report.json
    - pip install dependency-check
    - dependency-check --project "Task Manager" --scan . --format JSON --output dependency-check-report.json
  artifacts:
    paths:
      - bandit-report.json
      - dependency-check-report.json
    expire_in: 1 week

# Testes de Segurança Dinâmicos (DAST)
zap-scan:
  stage: security
  image: owasp/zap2docker-weekly
  script:
    - zap-baseline.py -t ${STAGE_APP_URL} -r zap-report.json
  artifacts:
    paths:
      - zap-report.json
    expire_in: 1 week

# Deploy para Staging
deploy-stage:
  stage: stage
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t ${DOCKER_IMAGE} .
    - docker push ${DOCKER_IMAGE}
  only:
    - main
  environment:
    name: staging
    url: "https://stage.gitlab.example.com"

# Deploy para Produção
deploy-prod:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t ${DOCKER_IMAGE} .
    - docker push ${DOCKER_IMAGE}
  only:
    - main
  when: manual
  environment:
    name: production
    url: "https://prod.gitlab.example.com"
